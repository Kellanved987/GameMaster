# game_loop.py

import json
from sqlalchemy.orm import Session as DBSession
from sqlalchemy import desc
from datetime import datetime

# Adjusted imports
from prompt_builder.builder import build_prompt
from gemini_interface.gemini_client import call_gemini_with_tools
from gpt_interface.gpt_client import call_chat_model
from db.schema import Turn
from memory.ingest import chunk_and_store
# --- FIX: We no longer need this dedicated dialogue tracker ---
# from utils.dialogue_tracker import update_conversation_context
from utils.simulation import run_simulation_pass
from utils.progression import evaluate_player_growth

SIMULATION_TURN_THRESHOLD = 5

def run_game_turn(db: DBSession, session_id: int, player_input: str):
    """
    Runs a single turn of the game, processes player input, and returns the GM response.
    """
    turn_counter = db.query(Turn).filter_by(session_id=session_id).count() + 1
    
    print("\n--- Processing Turn ---")
    full_prompt = build_prompt(db, session_id, player_input)
    
    messages = [
        {
            "role": "system",
            "content": "You are a cinematic, immersive AI game master. Narrate the outcome of the player's action based on the detailed context provided. Do not break character."
        },
        {"role": "user", "content": full_prompt}
    ]
    narration = call_chat_model(messages, model="gpt4o")

    # --- DATABASE LOGGING ---
    turn_entry = Turn(
        session_id=session_id,
        turn_number=turn_counter,
        player_input=player_input,
        gm_response=narration,
        prompt_snapshot=full_prompt,
        timestamp=datetime.utcnow()
    )
    db.add(turn_entry)
    db.commit()

    # --- MEMORY & CONTEXT ---
    chunk_and_store(f"Player: {player_input}\nGM: {narration}", session_id)
    # --- FIX: Removed the call to update_conversation_context ---
    
    # --- IMMEDIATE WORLD REACTION ---
    print("\n--- Checking for Immediate World Reactions ---")
    
    # --- FIX: This is now the single source of truth for all post-turn tool calls ---
    reaction_prompt = f"""
    The player just took an action ("{player_input}") and the GM narrated the result ("{narration}").
    
    Your task is to analyze this turn and call ANY necessary tools to update the game state.
    
    1.  **Dialogue:** If there was a conversation, use `save_dialogue_context`.
    2.  **Quests:** If a quest was updated, use `update_quest_status`.
    3.  **NPCs:** If an NPC's status changed, use `update_npc_status`.
    4.  **World:** If a world flag was set, use `set_world_flag`.
    5.  **Rumors:** If a new rumor started, use `create_rumor`.
    
    You can call multiple tools if necessary. If no tools are needed, respond with "No immediate world state changes."
    """
    call_gemini_with_tools(db, session_id, messages=reaction_prompt)
    print("--- World Reaction Check Complete ---")

    # --- PERIODIC SIMULATION & PROGRESSION ---
    if turn_counter % SIMULATION_TURN_THRESHOLD == 0:
        run_simulation_pass(db, session_id)
        evaluate_player_growth(db, session_id)
        
    return narration